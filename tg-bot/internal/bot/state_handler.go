package bot

import (
	"fmt"
	"log"
	"tg-app/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var StateHandler = map[State]func(h *Handler, update tgbotapi.Update, session *UserSession, chatID int64){
	StateMainMenu:          handlerMainMenu,
	StateRegistredText:     handlerRegistredText,
	StateRegistredInterval: handlerRegistredInterval,
	StateRegistredFinal:    handlerRegistredFinal,
	StateRegistredError:    handlerRegistredError,
}

func handlerMainMenu(h *Handler, update tgbotapi.Update, session *UserSession, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—éüëá</b>")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µüìã", "create_reminder"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "all_lists"),
		),
	)
	if _, err := h.Bot.Send(msg); err != nil {
		log.Println(err)
		return
	}
}

func handlerRegistredText(h *Handler, update tgbotapi.Update, session *UserSession, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è‚úçÔ∏è</b>")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
		),
	)
	if _, err := h.Bot.Send(msg); err != nil {
		log.Println("ERROR - ", err)
		return
	}
	session.State = "registred_interval"
}

func handlerRegistredInterval(h *Handler, update tgbotapi.Update, session *UserSession, chatID int64) {
	if session.IntervalRetry {
		msg := tgbotapi.NewMessage(chatID, "<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è‚è∞</b>")
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É", "redirect_registred_text"),
				tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back"),
			),
		)

		if _, err := h.Bot.Send(msg); err != nil {
			log.Println(err)
			return
		}

		session.IntervalRetry = false

		session.State = "registred_final"
		return
	}

	session.UserText = update.Message.Text
	msg := tgbotapi.NewMessage(chatID, "<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è‚è∞</b>")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç—É", "redirect_registred_text"),
			tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back"),
		),
	)

	if _, err := h.Bot.Send(msg); err != nil {
		log.Println(err)
		return
	}

	session.State = "registred_final"
}

func handlerRegistredFinal(h *Handler, update tgbotapi.Update, session *UserSession, chatID int64) {
	session.Interval = update.Message.Text

	var err error
	session.Reminder, err = utils.ParseIntervalData(chatID, session.UserText, session.Interval)
	if err != nil {
		log.Println(err)
		session.State = "registred_error"

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ 1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–Ω–æ–≤–æ:")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Println(err)
			return
		}
		return
	}

	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?</b>\n–¢–µ–∫—Å—Ç:\n%s\n–ò–Ω—Ç–µ—Ä–≤–∞–ª:\n%s",
			session.UserText,
			session.Interval))
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–∂–∞—é", "success_data"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É", "back_interval"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back"),
		),
	)
	if _, err := h.Bot.Send(msg); err != nil {
		log.Println(err)
		return
	}
}

func handlerRegistredError(h *Handler, update tgbotapi.Update, session *UserSession, chatID int64) {
	session.Interval = update.Message.Text

	var err error
	session.Reminder, err = utils.ParseIntervalData(update.Message.Chat.ID, session.UserText, session.Interval)
	if err != nil {
		session.State = "registred_error"
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞\n–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–Ω–æ–≤–æ:")
		if _, err := h.Bot.Send(msg); err != nil {
			log.Println(err)
			return
		}
		return
	}

	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?</b>\n–¢–µ–∫—Å—Ç:\n%s\n–ò–Ω—Ç–µ—Ä–≤–∞–ª:\n%s",
			session.UserText,
			session.Interval))
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–¥—Ç–≤–µ—Ä–∂–∞—é", "success_data"),
			tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back"),
		),
	)
	if _, err := h.Bot.Send(msg); err != nil {
		log.Println(err)
		return
	}
}
